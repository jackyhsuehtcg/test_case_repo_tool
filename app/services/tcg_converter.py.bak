"""
TCG 單號轉換服務

負責將 Lark record_id 轉換為實際的 TCG 單號顯示，參照 auto_tools 的實現方式
"""

import sqlite3
import logging
from typing import Optional, List, Dict, Any
from pathlib import Path


class TCGConverter:
    """TCG 單號轉換器，負責將 record_id 轉換為實際的 TCG 單號"""
    
    def __init__(self, db_path: str = "test_case_repo.db"):
        self.db_path = db_path
        self.logger = logging.getLogger(__name__)
        self._init_database()
    
    def _init_database(self):
        """初始化數據庫表格"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                # 使用 TCG 單號作為主鍵避免重複
                cursor.execute('''
                    CREATE TABLE IF NOT EXISTS tcg_records (
                        tcg_number TEXT PRIMARY KEY,
                        record_id TEXT NOT NULL,
                        title TEXT,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                ''')
                # 為 record_id 建立索引
                cursor.execute('''
                    CREATE INDEX IF NOT EXISTS idx_record_id ON tcg_records(record_id)
                ''')
                conn.commit()
                self.logger.info("TCG 映射資料庫初始化完成")
        except Exception as e:
            self.logger.error(f"初始化 TCG 映射資料庫失敗: {e}")
    
    def sync_tcg_from_lark(self) -> int:
        """
        從 Lark 同步所有 TCG 資料到本地資料庫
        
        Returns:
            同步的記錄數量
        """
        try:
            from app.services.lark_client import LarkClient
            from app.config import settings            
            # 初始化 Lark 客戶端
            lark_client = LarkClient(
                app_id="cli_a8d1077685be102f",
                app_secret="kS35CmIAjP5tVib1LpPIqUkUJjuj3pIt"
            )
            
            tcg_wiki_token = "Q4XxwaS2Cif80DkAku9lMKuAgof"
            tcg_table_id = "tblcK6eF3yQCuwwl"
            
            if not lark_client.set_wiki_token(tcg_wiki_token):
                self.logger.error("無法設定 Lark Wiki Token")
                return 0
            
            self.logger.info("開始從 Lark 同步 TCG 資料...")
            
            # 從 Lark 取得所有 TCG 資料（不指定欄位，避免 InvalidFieldNames 錯誤）
            records = lark_client.get_all_records(tcg_table_id)
            
            if not records:
                self.logger.warning("未從 Lark 取得到任何 TCG 記錄")
                return 0
            
            # 清空舊資料
            self.clear_all_mappings()
            
            # 批量插入新資料
            return self.update_tcg_mapping_from_lark_records(records)
            
        except Exception as e:
            self.logger.error(f"從 Lark 同步 TCG 資料失敗: {e}")
            return 0
    
    def update_tcg_mapping_from_lark_records(self, lark_records: List[Dict[str, Any]]) -> int:
        """
        從 Lark 記錄更新 TCG 映射
        
        Args:
            lark_records: Lark API 返回的記錄列表
        
        Returns:
            更新的記錄數量
        """
        updated_count = 0
        
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                
                for record in lark_records:
                    record_id = record.get('record_id')
                    fields = record.get('fields', {})
                    
                    # 提取 TCG 號碼，支援多種可能的欄位名稱
                    raw_tcg = (
                        fields.get('TCG Tickets') or
                        fields.get('TCG Number') or 
                        fields.get('TCG') or 
                        fields.get('Ticket Number')
                    )
                    
                    tcg_number = self._extract_text_from_field(raw_tcg)
                    
                    # 調試：打印第一個記錄的結構
                    if updated_count == 0:
                        self.logger.info(f"第一個記錄的所有欄位: {list(fields.keys())}")
                        if raw_tcg:
                            self.logger.info(f"第一個 TCG 記錄結構: {raw_tcg}")
                            self.logger.info(f"解析後的 TCG 號碼: {tcg_number}")
                    
                    title = (
                        fields.get('Title') or
                        fields.get('標題') or
                        fields.get('名稱') or
                        self._extract_text_from_field(fields.get('Title'))
                    )
                    
                    if record_id and tcg_number:
                        # 使用 REPLACE 來處理 UPSERT（以 tcg_number 為主鍵）
                        cursor.execute('''
                            INSERT OR REPLACE INTO tcg_records 
                            (tcg_number, record_id, title, updated_at)
                            VALUES (?, ?, ?, CURRENT_TIMESTAMP)
                        ''', (tcg_number, record_id, title))
                        updated_count += 1
                
                conn.commit()
                self.logger.info(f"更新了 {updated_count} 個 TCG 映射記錄")
                
        except Exception as e:
            self.logger.error(f"更新 TCG 映射失敗: {e}")
        
        return updated_count
    
    def get_tcg_number_by_record_id(self, record_id: str) -> Optional[str]:
        """將單個 record_id 轉換為 TCG 單號"""
        if not record_id:
            return None
        
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT tcg_number FROM tcg_records WHERE record_id = ?",
                    (record_id,)
                )
                result = cursor.fetchone()
                return result[0] if result else None
        except Exception as e:
            self.logger.error(f"查詢 record_id {record_id} 對應的 TCG 單號失敗: {e}")
            return None
    
    def get_tcg_numbers_by_record_ids(self, record_ids: List[str]) -> Dict[str, str]:
        """批量轉換多個 record_id"""
        if not record_ids:
            return {}
        
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                placeholders = ",".join("?" * len(record_ids))
                cursor.execute(
                    f"SELECT record_id, tcg_number FROM tcg_records WHERE record_id IN ({placeholders})",
                    record_ids
                )
                results = cursor.fetchall()
                return {record_id: tcg_number for record_id, tcg_number in results}
        except Exception as e:
            self.logger.error(f"批量查詢 record_ids 對應的 TCG 單號失敗: {e}")
            return {}
    
    def get_record_id_by_tcg_number(self, tcg_number: str) -> Optional[str]:
        """根據 TCG 單號查找 record_id（用於搜尋功能）"""
        if not tcg_number:
            return None
        
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute(
                    "SELECT record_id FROM tcg_records WHERE tcg_number = ?",
                    (tcg_number,)
                )
                result = cursor.fetchone()
                return result[0] if result else None
        except Exception as e:
            self.logger.error(f"查詢 TCG 單號 {tcg_number} 對應的 record_id 失敗: {e}")
            return None
    
    def search_tcg_numbers(self, keyword: str = "", limit: int = 50) -> List[Dict[str, str]]:
        """搜尋 TCG 單號"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                if keyword:
                    cursor.execute('''
                        SELECT record_id, tcg_number, title 
                        FROM tcg_records 
                        WHERE tcg_number LIKE ? OR title LIKE ?
                        ORDER BY tcg_number
                        LIMIT ?
                    ''', (f'%{keyword}%', f'%{keyword}%', limit))
                else:
                    cursor.execute('''
                        SELECT record_id, tcg_number, title 
                        FROM tcg_records 
                        ORDER BY tcg_number
                        LIMIT ?
                    ''', (limit,))
                
                results = cursor.fetchall()
                return [
                    {
                        'record_id': record_id,
                        'tcg_number': tcg_number,
                        'title': title or '',
                        'display_text': tcg_number
                    }
                    for record_id, tcg_number, title in results
                ]
        except Exception as e:
            self.logger.error(f"搜尋 TCG 單號失敗: {e}")
            return []
    
    def get_popular_tcg_numbers(self, limit: int = 20) -> List[Dict[str, str]]:
        """取得熱門的 TCG 單號（按使用頻率）"""
        # 暫時返回所有 TCG，未來可以實現使用統計
        return self.search_tcg_numbers("", limit)
    
    def get_all_tcg_mappings(self) -> Dict[str, str]:
        """取得所有 TCG 映射（用於同步檢查）"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT record_id, tcg_number FROM tcg_records")
                results = cursor.fetchall()
                return {record_id: tcg_number for record_id, tcg_number in results}
        except Exception as e:
            self.logger.error(f"取得所有 TCG 映射失敗: {e}")
            return {}
    
    def clear_all_mappings(self) -> bool:
        """清除所有映射（用於重新同步）"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("DELETE FROM tcg_records")
                conn.commit()
                self.logger.info("已清除所有 TCG 映射")
                return True
        except Exception as e:
            self.logger.error(f"清除 TCG 映射失敗: {e}")
            return False
    
    @staticmethod
    def _extract_text_from_field(field_value: Any) -> Optional[str]:
        """從各種 Lark 欄位格式中提取文字內容"""
        if field_value is None:
            return None
        
        # 如果已經是字符串，直接返回
        if isinstance(field_value, str):
            return field_value.strip() if field_value.strip() else None
        
        # 處理字典格式: {'text': 'TCG-82567', 'link': 'https://jira.tc-gaming.co/jira/browse/TCG-82567'}
        if isinstance(field_value, dict):
            # 先嘗試 text 欄位
            text = field_value.get('text')
            if text and isinstance(text, str):
                stripped_text = text.strip()
                return stripped_text if stripped_text else None
            # 再嘗試 link 欄位
            link = field_value.get('link')
            if link and isinstance(link, str):
                stripped_link = link.strip()
                return stripped_link if stripped_link else None
            # 如果都沒有，返回 None 而不是字符串化整個 dict
            return None
        
        # 處理列表格式: [{'text': 'TCG-93178', 'type': 'text'}]
        if isinstance(field_value, list) and field_value:
            first_item = field_value[0]
            # 遞歸處理第一個元素
            return TCGConverter._extract_text_from_field(first_item)
        
        # 其他類型轉為字符串
        try:
            result = str(field_value).strip()
            return result if result else None
        except:
            return None


# 全域轉換器實例
tcg_converter = TCGConverter()