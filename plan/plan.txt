0. 專案目的：

0-1. 寫一個 Lark Client，能夠讀／寫 Lark 多維表格中維護的 Test Case Repo 資料表，當成資料庫來使用
0-2. 寫一個網頁介面，類似 Testrail 的 Test Case 呈現方式
0-3. 在網頁介面上做的任何更動，都會即時更新在 Lark Base 中
0-4. 網站介面第一層分類為 Team，第二層為 Test Case 以及 Test Run 管理

1. Client
1-1. Lark Client 參考既有專案的成果，路徑：/Users/hideman/code/jira_sync_v3/lark_client.py
1-2. JIRA Client 參考既有專案的成果，路徑：/Users/hideman/code/jira_sync_v3/jira_client.py

2. 網頁介面
1-1. 風格參照既有成果：/Users/hideman/code/user_story_map_converter
2-1. 必須包含以下功能性頁面：團隊管理介面，團隊功能選擇頁面，團隊 Test Case 管理頁面，團隊 Test Run 管理頁面
2-1-1 團隊功能選擇介面
 - 作為首頁，各 team 選擇自己專案 Test Case Repo 的入口，有選單可供選擇進入 Test Case 還是 Test Run 管理
 - 選擇專案之後，跳轉到團隊選擇 Test Run 或 Test Case 的管理頁面

2-1-2 團隊管理介面
 - 管理團隊的 Test Case Repo 資料表來源
 - 必須要有驗證器檢查是否能夠連接

2-1-3 團隊 Test Case 管理頁面
 - 使用團隊管理介面的資料表 URL
 - 需包含 Search 功能，包含使用 Title 做模糊搜尋，TCG 單號過濾，Priority 過濾，並可以組合使用
 - 需包含 test case 批次管理功能：批次刪除，批次更改連結的 TCG 單號
 - 需在 test case 列表介面就能夠更改 title，連結的 TCG 單號
 - 需能夠讀取上次操作時的設定，存放在 user 瀏覽器端
 - Title, Priority 欄位需要能夠排序
 - 點擊 test case 後，需要出現不跳轉的 test case detail 瀏覽介面
 - Test Case Detail瀏覽介面上需包含 test case 編輯按鈕，刪除按鈕
 - Test Case Detail 瀏覽介面需支援 markdown 語法
 - Test Case Detail refer 的單號（以 #TCGXXXXX.YYY.ZZZ 表示 ），hover 在上面會出現 preview，並有連結可以另外開 tab 瀏覽細節
 - Test Case Detail 編輯，Precondition, Steps, Expected Result 需有簡單的工具列支援 markdown 編輯
 - 需支援 Test Case attachment 上傳跟管理
 - 除了標準欄位外，可以支援各team 在 lark test case repo 的自訂欄位

2-1-4 團隊 Test Run 管理頁面
 - 需要 user 在 lark 建立 test run 資料表後再到此頁面貼上 link 來管理
 - 基本呈現跟 Test Case 管理頁面相同，但不能編輯跟刪除 test case
 - 可以新增 result screenshot
 - 可以新增 JIRA bug 連結

3. 底層架構
3-1 sqlite：設定以及暫存類，使用 sqlite 來管理
3-2 盡量使用成熟跟定義好的元件
3-3 主要使用 bootstrap

4. 外接功能
4-1 可以傳送測試結果給 Lark 公司群組或特定人物

5. 額外開發原則
不使用過於複雜或難以維護的方式開發